@page "/compact"
@using UnitConvertorWebApp.Models
@using UnitConvertorWebApp.Services
@using UnitConvertorWebApp.Pages.Components
@using UnitConvertorWebApp.ViewModels
@using UnitsNet
@inject IConversionService ConversionService
@inject IFavoritesService FavoritesService


<MudGrid>
    <MudItem xs="12" sm="4">
        <MudCard Class="full-height">
            <MudCardHeader Class="mud-theme-primary">
                <MudText Typo="Typo.h6">Quantity</MudText>
            </MudCardHeader>

            <MudTextField @bind-Value="@ViewModel.SearchText" Label="Search Quantities" Variant="Variant.Filled" Clearable="true"
                          AdornmentColor="Color.Primary" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                          OnDebounceIntervalElapsed="@ViewModel.FilterQuantities" DebounceInterval="300" />

            <MudList Dense="true" T="string" Color="Color.Primary">
                @foreach (var quantity in ViewModel.FilteredQuantities)
                {
                    <MudListItem @onclick="(() => ViewModel.SelectQuantityAsync(quantity))" Selected="@(ViewModel.SelectedQuantity == quantity)" Class="@(ViewModel.SelectedQuantity == quantity ? "selected-item" : "")">
                        <div class="d-flex justify-space-between align-center w-100">
                            <MudText>@quantity</MudText>
                            <FavoriteButton IsFavorite="@ViewModel.FavoritesMap.GetValueOrDefault(quantity)" OnToggleFavorite="() => ViewModel.ToggleFavoriteAsync(quantity)" />
                        </div>
                    </MudListItem>
                }
            </MudList>
        </MudCard>
    </MudItem>

    <MudItem xs="12" sm="8">
        @if (ViewModel.SelectedQuantity != null)
        {
            <MudGrid Spacing="4">
                <MudItem xs="6">
                    <MudCard Class="unit-card">
                        <MudCardHeader Class="mud-theme-primary">
                            <MudText Typo="Typo.h6">From</MudText>
                        </MudCardHeader>
                        <MudList Dense="true" T="string" Color="Color.Primary">
                            @foreach (var unit in ViewModel.AvailableUnits)
                            {
                                <MudListItem @onclick="(() => ViewModel.SelectedFromUnit = unit)" Selected="@(ViewModel.SelectedFromUnit == unit)" Class="@(ViewModel.SelectedFromUnit == unit ? "selected-item" : "")">
                                    @unit
                                </MudListItem>
                            }
                        </MudList>
                    </MudCard>
                </MudItem>
                <MudItem xs="6">
                    <MudCard Class="unit-card">
                        <MudCardHeader Class="mud-theme-primary">
                            <MudText Typo="Typo.h6">To</MudText>
                        </MudCardHeader>
                        <MudList Dense="true" T="string" Color="Color.Primary">
                            @foreach (var unit in ViewModel.AvailableUnits)
                            {
                                <MudListItem @onclick="(() => ViewModel.SelectedToUnit = unit)" Selected="@(ViewModel.SelectedToUnit == unit)" Class="@(ViewModel.SelectedToUnit == unit ? "selected-item" : "")">
                                    @unit
                                </MudListItem>
                            }
                        </MudList>
                    </MudCard>
                </MudItem>
                <MudItem xs="6">
                    <MudCard>
                        <MudTextField @bind-Value="ViewModel.InputValue" Label="Value" Variant="Variant.Filled" />
                    </MudCard>
                </MudItem>
                <MudItem xs="6">
                    <MudCard>
                        <MudTextField ReadOnly="true" Value="@ViewModel.ResultText" Label="Result" Variant="Variant.Filled" />
                    </MudCard>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton OnClick="ViewModel.ConvertUnitsAsync" Color="Color.Primary" Variant="Variant.Filled">Convert</MudButton>
                </MudItem>
            </MudGrid>
        }
    </MudItem>
</MudGrid>

@code {
    private ConversionViewModel ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ViewModel = new ConversionViewModel(ConversionService, FavoritesService);
        ViewModel.StateChanged += StateHasChanged;
        await ViewModel.InitializeAsync();
    }

    public void Dispose()
    {
        ViewModel.StateChanged -= StateHasChanged;
        ViewModel.Dispose();
    }
}