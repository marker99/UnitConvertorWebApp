@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime

<MudThemeProvider Theme="MyCustomTheme" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudText Typo="Typo.h5" Class="ml-3">Application</MudText>
        <MudSpacer />
        <MudToggleIconButton @bind-Toggled="_isDarkMode" Color="Color.Inherit" Icon="@Icons.Material.Filled.DarkMode"
                             ToggledIcon="@Icons.Material.Filled.LightMode" ToggledColor="Color.Default" title="@(_isDarkMode ? "Light mode" : "Dark mode")" />
        @* <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" /> *@
    </MudAppBar>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDarkMode;
    // private MudThemeProvider _mudThemeProvider;

    MudTheme MyCustomTheme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                AppbarBackground = "#006661",
                Background = "#ffffff",
                // AppbarText = "#333333",
                Surface = "#f8f6f6",
                Divider = "#004e4a",
                TextPrimary = Colors.Gray.Darken4,
                Primary = "#006661",
                
            },

            PaletteDark = new PaletteDark()
            {
                AppbarBackground = "#006661",
                Background = "#212121",
                Surface = "#2f2f2f",
                Divider = "#006661",
                
                Primary = "#006661",
            }
        };


    protected override async Task OnInitializedAsync()
    {
        var isDarkMode = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "isDarkMode");

        if (string.IsNullOrEmpty(isDarkMode))
        {
            _isDarkMode = true;
        }
        else
        {
            _isDarkMode = bool.TryParse(isDarkMode, out var result) && result;
        }
    }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         _isDarkMode = await MyCustomTheme.GetSystemPreference();
    //         StateHasChanged();
    //     }
    // }

    // private Task OnSystemPreferenceChanged(bool newValue)
    // {
    //     _isDarkMode = newValue;
    //     StateHasChanged();
    //     return Task.CompletedTask;
    // }
}