@using UnitConvertorWebApp.Models
@using UnitConvertorWebApp.Services
@inject IWeightConversionService WeightService

<MudCard Class="mx-4" Elevation="1" Style="border-radius: 24px">
    <MudCardContent>
        <MudText Typo="Typo.h5"  Class="mb-4">@TitleOfCard</MudText>

        <MudGrid Spacing="4" Justify="Justify.Center">
            <MudItem xs="12" sm="3" md="3">
                <MudSelect @bind-Value="selectedFromUnit" Label="From Unit" Variant="Variant.Outlined"  AdornmentColor="Color.Primary">
                    @foreach (var unit in Units)
                    {
                            <MudSelectItem Value="@unit">@unit</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12" sm="3" md="3">
                <MudTextField @bind-Value="inputValue" Label="Enter Value" Variant="Variant.Outlined"  AdornmentColor="Color.Primary" />
            </MudItem>

            <MudItem xs="12" sm="3" md="3">
                <MudSelect @bind-Value="selectedToUnit" Label="To Unit" Variant="Variant.Outlined" AdornmentColor="Color.Primary">
                    @foreach (var unit in Units.Where(u => u != selectedFromUnit))
                    {
                            <MudSelectItem Value="@unit">@unit</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12" sm="3" md="2" Class="d-flex justify-center align-center">
                <MudButton OnClick="ConvertUnits" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Calculate">Convert</MudButton>
            </MudItem>

            <MudItem xs="12" sm="4" md="3" Class="d-flex justify-center">
                <MudTextField Label="Result" Variant="Variant.Outlined" ReadOnly="true" Value="@resultText"  />
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

<MudDivider Class="my-6" Style="height: 4px; background-color: #ab542e; border-radius:8px" />


@code {
    [Parameter] public List<string> Units { get; set; } = new();
    [Parameter] public Func<double, string, string, ConversionResult> Convert { get; set; } = default!;
    [Parameter] public string DefaultFromUnit { get; set; } = string.Empty;
    [Parameter] public string DefaultToUnit { get; set; } = string.Empty;
    [Parameter] public string TitleOfCard { get; set; } = string.Empty;

    private string selectedFromUnit;
    private string selectedToUnit;
    private double inputValue;
    private string resultText = string.Empty;

    protected override void OnInitialized()
    {
        selectedFromUnit = DefaultFromUnit;
        selectedToUnit = DefaultToUnit;
    }

    private void ConvertUnits()
    {
        var result = Convert(inputValue, selectedFromUnit, selectedToUnit);
        resultText = $"{result.NumericValue} {result.Abbreviation}";
    }
}
