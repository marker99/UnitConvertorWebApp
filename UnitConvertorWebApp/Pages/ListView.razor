@using UnitConvertorWebApp.Models
@using UnitConvertorWebApp.Pages.Components
@using UnitConvertorWebApp.Services
@using UnitsNet
@inject IConversionService DynamicConversionService

@page "/dynamic"

<MudTextField @bind-Value="searchText"
              Label="Search Quantities"
              Variant="Variant.Filled"
              Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search"
              Class="mb-4" Clearable="true"
              DebounceInterval="300"
              OnDebounceIntervalElapsed="@FilterQuantities" />

@if (filteredQuantities != null)
{
    <MudVirtualize Items="filteredQuantities" Context="quantity" OverscanCount="5" >
        <ConversionComponent TitleOfCard="@quantity" 
                             Units="@GetUnitsForQuantity(quantity)" 
                             DefaultFromUnit="@GetDefaultFromUnit(quantity)" 
                             DefaultToUnit="@GetDefaultToUnit(quantity)" 
                             Convert="(value, fromUnit, toUnit) => ConvertValue(quantity, value, fromUnit, toUnit)" />
    </MudVirtualize>
}

@code {
    private List<string> quantities;
    private List<string> filteredQuantities;
    private string searchText = string.Empty;
    private Dictionary<string, List<string>> quantityUnitsCache = new Dictionary<string, List<string>>();

    protected override void OnInitialized()
    {
        quantities = Quantity.Names.ToList();
        filteredQuantities = new List<string>(quantities);
    }

    private List<string> GetUnitsForQuantity(string quantity)
    {
        if (!quantityUnitsCache.TryGetValue(quantity, out var units))
        {
            var quantityInfo = Quantity.ByName[quantity];
            units = quantityInfo.UnitInfos.Select(ui => ui.Name).ToList();
            quantityUnitsCache[quantity] = units;
        }
        return units;
    }

    private string GetDefaultFromUnit(string quantity)
    {
        var units = GetUnitsForQuantity(quantity);
        return units.FirstOrDefault() ?? string.Empty;
    }

    private string GetDefaultToUnit(string quantity)
    {
        var units = GetUnitsForQuantity(quantity);
        return units.Skip(1).FirstOrDefault() ?? string.Empty;
    }

    private ConversionResult ConvertValue(string quantity, double value, string fromUnit, string toUnit)
    {
        return DynamicConversionService.Convert(quantity, value, fromUnit, toUnit);
    }

    private void FilterQuantities()
    {
        filteredQuantities = string.IsNullOrWhiteSpace(searchText)
            ? new List<string>(quantities)
            : quantities.Where(q => q.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        StateHasChanged();
    }
}