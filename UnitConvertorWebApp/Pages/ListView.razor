@page "/list"
@using UnitConvertorWebApp.Models
@using UnitConvertorWebApp.Pages.Components
@using UnitConvertorWebApp.Services
@using UnitConvertorWebApp.ViewModels
@using UnitsNet
@inject IConversionService ConversionService
@inject IFavoritesService FavoritesService

<MudTextField Class="mb-4" @bind-Value="@ViewModel.SearchText" Label="Search Quantities" Variant="Variant.Filled"
              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
              Clearable="true" DebounceInterval="300" OnDebounceIntervalElapsed="@ViewModel.FilterQuantities" />

@if (ViewModel.FilteredQuantities != null)
{
    <MudItem Class="mb-2">
        <Virtualize Items="ViewModel.FilteredQuantities" Context="quantity">
            <ConversionComponent TitleOfCard="@quantity"
                                 Units="@ViewModel.AvailableUnits.ToList()"
                                 SelectedFromUnit="@ViewModel.SelectedFromUnit"
                                 SelectedToUnit="@ViewModel.SelectedToUnit"
                                 IsFavorite="@ViewModel.FavoritesMap[quantity]"
                                 InputValue="@ViewModel.InputValue"
                                 ResultText="@ViewModel.ResultText"
                                 OnToggleFavorite="@((bool newState) => ViewModel.ToggleFavoriteAsync(quantity, newState))"
                                 OnFromUnitChanged="@((string value) => ViewModel.SelectedFromUnit = value)"
                                 OnToUnitChanged="@((string value) => ViewModel.SelectedToUnit = value)"
                                 OnConvert="@ViewModel.ConvertUnitsAsync" />
        </Virtualize>
    </MudItem>
}

@code {
    private ConversionViewModel ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ViewModel = new ConversionViewModel(ConversionService, FavoritesService);
        ViewModel.StateChanged += StateHasChanged;
        await ViewModel.InitializeAsync();
    }

    public void Dispose()
    {
        ViewModel.StateChanged -= StateHasChanged;
        ViewModel.Dispose();
    }
}