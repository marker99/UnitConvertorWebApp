@page "/list"
@using UnitConvertorWebApp.Models
@using UnitConvertorWebApp.Pages.Components
@using UnitConvertorWebApp.Services
@using UnitsNet
@inject IConversionService ConversionService
@inject IFavoritesService FavoritesService

<MudTextField Class="mb-4" @bind-Value="searchText" Label="Search Quantities" Variant="Variant.Filled"
              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
              Clearable="true" DebounceInterval="300" OnDebounceIntervalElapsed="FilterQuantities" />

@if (filteredQuantities != null)
{
    <MudItem Class="mb-2">
        <Virtualize Items="filteredQuantities" Context="quantity">
            @if (quantityData.TryGetValue(quantity, out var data))
            {
                <ConversionComponent TitleOfCard="@quantity"
                                     Units="@data.Units"
                                     DefaultFromUnit="@data.DefaultFromUnit"
                                     DefaultToUnit="@data.DefaultToUnit"
                                     IsFavorite="@favorites.Contains(quantity)"
                                     OnToggleFavorite="@(() => ToggleFavoriteAsync(quantity))" />
            }
            else
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
        </Virtualize>
    </MudItem>
}

@code {
    private List<string> quantities = new();
    private List<string> filteredQuantities = new();
    private HashSet<string> favorites = new(StringComparer.OrdinalIgnoreCase);
    private string searchText = string.Empty;
    private Dictionary<string, QuantityData> quantityData = new();

    private class QuantityData
    {
        public List<string> Units { get; set; } = new();
        public string DefaultFromUnit { get; set; } = string.Empty;
        public string DefaultToUnit { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFavoritesAsync();
        await LoadQuantitiesAsync();
    }

    private async Task LoadQuantitiesAsync()
    {
        quantities = await ConversionService.GetAvailableQuantitiesAsync();
        await FilterQuantities();
    }

    private async Task LoadFavoritesAsync() => favorites = new HashSet<string>(await FavoritesService.GetFavoritesAsync(), StringComparer.OrdinalIgnoreCase);

    private async Task LoadQuantityDataAsync(IEnumerable<string> quantitiesToLoad)
    {
        foreach (var quantity in quantitiesToLoad.Where(q => !quantityData.ContainsKey(q)))
        {
            var units = await ConversionService.GetAvailableUnitsAsync(quantity);
            quantityData[quantity] = new QuantityData
                {
                    Units = units,
                    DefaultFromUnit = units.FirstOrDefault() ?? string.Empty,
                    DefaultToUnit = units.Skip(1).FirstOrDefault() ?? string.Empty
                };
        }
    }

    private async Task FilterQuantities()
    {
        IEnumerable<string> filtered = string.IsNullOrWhiteSpace(searchText)
            ? quantities
            : quantities.Where(q => q.Contains(searchText, StringComparison.OrdinalIgnoreCase));

        filteredQuantities = favorites.Intersect(filtered)
            .Concat(filtered.Except(favorites))
            .ToList();

        await LoadQuantityDataAsync(filteredQuantities);
        StateHasChanged();
    }

    private async Task ToggleFavoriteAsync(string quantity)
    {
        if (favorites.Contains(quantity))
        {
            await FavoritesService.RemoveFavoriteAsync(quantity);
            favorites.Remove(quantity);
        }
        else
        {
            await FavoritesService.AddFavoriteAsync(quantity);
            favorites.Add(quantity);
        }

        await FilterQuantities();
    }
}

