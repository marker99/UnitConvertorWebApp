@page "/list"
@using UnitConvertorWebApp.Models
@using UnitConvertorWebApp.Pages.Components
@using UnitConvertorWebApp.Services
@using UnitsNet
@inject IConversionService ConversionService

<MudTextField Class="mb-4" @bind-Value="searchText" Label="Search Quantities" Variant="Variant.Filled"
              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
              Clearable="true" DebounceInterval="300" OnDebounceIntervalElapsed="FilterQuantities" />

@if (filteredQuantities != null)
{
    <MudItem Class="mb-2">
        <Virtualize Items="filteredQuantities" Context="quantity">
            @if (quantityData.ContainsKey(quantity))
            {
                var data = quantityData[quantity];
                <ConversionComponent TitleOfCard="@quantity"
                                     Units="@data.Units"
                                     DefaultFromUnit="@data.DefaultFromUnit"
                                     DefaultToUnit="@data.DefaultToUnit"
                                     Convert="@((value, fromUnit, toUnit) => ConvertValueAsync(quantity, value, fromUnit, toUnit))" />
            }
            else
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
        </Virtualize>
    </MudItem>
}

@code {
    private List<string> quantities;
    private List<string> filteredQuantities;
    private string searchText = string.Empty;
    private Dictionary<string, QuantityData> quantityData = new Dictionary<string, QuantityData>();

    private class QuantityData
    {
        public List<string> Units { get; set; }
        public string DefaultFromUnit { get; set; }
        public string DefaultToUnit { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadQuantitiesAsync();
    }

    private async Task LoadQuantitiesAsync()
    {
        quantities = await ConversionService.GetAvailableQuantitiesAsync();
        filteredQuantities = new List<string>(quantities);
        await LoadQuantityDataAsync(filteredQuantities);
    }

    private async Task LoadQuantityDataAsync(IEnumerable<string> quantitiesToLoad)
    {
        foreach (var quantity in quantitiesToLoad)
        {
            if (!quantityData.ContainsKey(quantity))
            {
                var units = await ConversionService.GetAvailableUnitsAsync(quantity);
                quantityData[quantity] = new QuantityData
                    {
                        Units = units,
                        DefaultFromUnit = units.FirstOrDefault() ?? string.Empty,
                        DefaultToUnit = units.Skip(1).FirstOrDefault() ?? string.Empty
                    };
            }
        }
    }

    private async Task FilterQuantities()
    {
        filteredQuantities = string.IsNullOrWhiteSpace(searchText)
            ? new List<string>(quantities.Take(20))
            : quantities.Where(q => q.Contains(searchText, StringComparison.OrdinalIgnoreCase)).Take(20).ToList();

        await LoadQuantityDataAsync(filteredQuantities);
        StateHasChanged();
    }

    private async Task<ConversionResult> ConvertValueAsync(string quantity, double value, string fromUnit, string toUnit)
    {
        return await ConversionService.ConvertAsync(quantity, value, fromUnit, toUnit);
    }
}