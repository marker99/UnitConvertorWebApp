@page "/compact"
@using UnitConvertorWebApp.Models
@using UnitConvertorWebApp.Services
@using UnitsNet
@inject IConversionService ConversionService

<MudGrid>
    <MudItem xs="12" sm="4">
        <MudCard Class="full-height">
            <MudCardHeader Class="mud-theme-primary">
                <MudText Typo="Typo.h6">Quantity</MudText>
            </MudCardHeader>

            <MudTextField @bind-Value="searchText"
                          Label="Search Quantities"
                          Variant="Variant.Filled"
                          Clearable="true"
                          AdornmentColor="Color.Primary"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          OnDebounceIntervalElapsed="FilterQuantities"
                          DebounceInterval="300" />

            <MudList Dense="true" T="string" Color="Color.Primary">
                @foreach (var quantity in filteredQuantities)
                {
                    <MudListItem @onclick="(() => SelectQuantityAsync(quantity))"
                                 Selected="@(selectedQuantity == quantity)"
                                 Class="@(selectedQuantity == quantity ? "selected-item" : "")">
                        @quantity
                    </MudListItem>
                }
            </MudList>
        </MudCard>
    </MudItem>

    <MudItem xs="12" sm="8">
        @if (selectedQuantity != null)
        {
            <MudGrid Spacing="4">
                <MudItem xs="6">
                    <MudCard Class="unit-card">
                        <MudCardHeader Class="mud-theme-primary">
                            <MudText Typo="Typo.h6">From</MudText>
                        </MudCardHeader>
                        <MudList Dense="true" T="string" Color="Color.Primary">
                            @foreach (var unit in fromUnits)
                            {
                                <MudListItem @onclick="(() => selectedFromUnit = unit)"
                                             Selected="@(selectedFromUnit == unit)"
                                             Class="@(selectedFromUnit == unit ? "selected-item" : "")">
                                    @unit
                                </MudListItem>
                            }
                        </MudList>
                    </MudCard>
                </MudItem>

                <MudItem xs="6">
                    <MudCard Class="unit-card">
                        <MudCardHeader Class="mud-theme-primary">
                            <MudText Typo="Typo.h6">To</MudText>
                        </MudCardHeader>
                        <MudList Dense="true" T="string" Color="Color.Primary">
                            @foreach (var unit in toUnits)
                            {
                                <MudListItem @onclick="(() => selectedToUnit = unit)"
                                             Selected="@(selectedToUnit == unit)"
                                             Class="@(selectedToUnit == unit ? "selected-item" : "")">
                                    @unit
                                </MudListItem>
                            }
                        </MudList>
                    </MudCard>
                </MudItem>

                <MudItem xs="6">
                    <MudCard>
                        <MudTextField @bind-Value="inputValue" Label="Value" Variant="Variant.Filled" />
                    </MudCard>
                </MudItem>

                <MudItem xs="6">
                    <MudCard>
                        <MudTextField ReadOnly="true" Value="@resultText" Label="Result" Variant="Variant.Filled" />
                    </MudCard>
                </MudItem>

                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton OnClick="ConvertUnitsAsync" Color="Color.Primary" Variant="Variant.Filled">Convert</MudButton>
                </MudItem>
            </MudGrid>
        }
    </MudItem>
</MudGrid>

@code {
    private List<string> quantities = new();
    private List<string> filteredQuantities = new();
    private List<string> fromUnits = new();
    private List<string> toUnits = new();
    private string selectedQuantity;
    private string selectedFromUnit;
    private string selectedToUnit;
    private double inputValue;
    private string resultText = string.Empty;
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        quantities = await ConversionService.GetAvailableQuantitiesAsync();
        filteredQuantities = new List<string>(quantities);

        if (quantities.Any())
        {
            await SelectQuantityAsync(quantities.First());
        }
    }

    private async Task FilterQuantities()
    {
        filteredQuantities = string.IsNullOrWhiteSpace(searchText)
            ? new List<string>(quantities)
            : quantities.Where(q => q.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();

        StateHasChanged();
    }

    private async Task SelectQuantityAsync(string quantity)
    {
        selectedQuantity = quantity;
        fromUnits = await ConversionService.GetAvailableUnitsAsync(quantity);
        toUnits = new List<string>(fromUnits);

        selectedFromUnit = fromUnits.FirstOrDefault();
        selectedToUnit = toUnits.Skip(1).FirstOrDefault();
    }

    private async Task ConvertUnitsAsync()
    {
        if (!string.IsNullOrEmpty(selectedQuantity) && !string.IsNullOrEmpty(selectedFromUnit) && !string.IsNullOrEmpty(selectedToUnit))
        {
            var result = await ConversionService.ConvertAsync(selectedQuantity, inputValue, selectedFromUnit, selectedToUnit);
            resultText = $"{result.NumericValue} {result.Abbreviation}";
        }
    }
}