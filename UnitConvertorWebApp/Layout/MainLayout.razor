@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime

<MudThemeProvider Theme="MyCustomTheme" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudText Typo="Typo.h5" Class="ml-3">Unit Converter</MudText>
        <MudSpacer />
        <MudToggleIconButton @bind-Toggled="_isDarkMode" Color="Color.Inherit" Icon="@Icons.Material.Filled.DarkMode"
                             ToggledIcon="@Icons.Material.Filled.LightMode" ToggledColor="Color.Default" title="@(_isDarkMode ? "Light mode" : "Dark mode")" />
    </MudAppBar>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDarkMode;

    MudTheme MyCustomTheme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                AppbarBackground = "#EBEBEB",
                Background = "#EFEFEF",
                AppbarText = Colors.Gray.Darken4,
                TextPrimary = Colors.Gray.Darken4,

                Primary = "#ab542e",
                Surface = "#F5F5F5",
                Divider = "#ab542e",
            },

            PaletteDark = new PaletteDark()
            {
                AppbarBackground = "#181818",
                Background = "#1a1a1a",

                Primary = "#ab542e",
                Surface = "#222222",
                Divider = "#ab542e",
            },

            Typography = new Typography()
            {
                Default = new Default()
                {
                    // FontFamily = new[] { "Montserrat" },
                    // FontFamily = new[] { "Open Sans" },
                    FontFamily = new[] { "Roboto" },
                    // FontFamily = new[] { "Poppins" },
                    // FontFamily = new[] { "Helvetica" },
                },
            }
        };

    protected override async Task OnInitializedAsync()
    {
        var isDarkMode = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "isDarkMode");

        if (string.IsNullOrEmpty(isDarkMode))
        {
            _isDarkMode = true;
        }
        else
        {
            _isDarkMode = bool.TryParse(isDarkMode, out var result) && result;
        }
    }
}