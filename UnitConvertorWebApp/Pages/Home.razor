@page "/"
@using UnitConvertorWebApp.Pages
@using MudBlazor.Extensions
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<MudGrid>
    <!-- First row: Welcome message and button -->
    <MudItem xs="12">
        <MudGrid>
            <!-- Welcome message -->
            <MudItem xs="12" sm="9">
                <MudText Typo="Typo.h5">Welcome! - Here you can convert various units</MudText>
            </MudItem>

            <!-- Button on the far right side -->
            <MudItem xs="12" sm="3" Class="d-flex justify-end">
                <MudToggleIconButton ToggledChanged="ToggleView" Color="Color.Primary" Icon="@Icons.Material.Filled.ViewAgenda"
                                     ToggledIcon="@Icons.Material.Filled.ViewCompact" title="@(isCompactView ? "Switch to List View" : "Switch to Compact View")" />
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

<!-- Divider -->
<MudDivider Class="mt-2 mb-6" Style="height: 4px; background-color: #ab542e; border-radius:8px" />


<!-- Loading spinner or views -->
@if (isLoading)
{
    <!-- Display a loading animation when switching views -->
    <MudGrid>
        <MudItem xs="12" Class="d-flex justify-center">
            <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
        </MudItem>
    </MudGrid>
}
else
{
    <MudAnimate @ref="_animate" Selector=".view" Duration="0.5" AnimationTiming="AnimationTiming.EaseInOut"
                AnimationType="AnimationType.Fade" Value="1" />
    <!-- Apply CSS classes for transition -->
    <div class="view">
        @if (isCompactView)
        {
            <CompactView />
        }
        else
        {
            <ListView />
        }
    </div>
}

@code {
    MudAnimate? _animate = new();
    private bool isCompactView = true;
    private bool isLoading = false;

    private async Task ToggleView()
    {
        // Start loading state
        isLoading = true;

        // Wait for the spinner to be fully visible
        await Task.Delay(100);

        // Toggle the view after a brief delay
        isCompactView = !isCompactView;

        // // Wait for the spinner to be hidden
        await Task.Delay(500);

        // End loading state
        isLoading = false;

        // Refresh the animation after the view switch
        await _animate?.Refresh();
    }
}


